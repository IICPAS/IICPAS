"use client";

import React, { useState, useEffect } from "react";
import {
  FaSave,
  FaFileAlt,
  FaCalculator,
  FaCheck,
  FaTimes,
  FaInfoCircle,
  FaPlay,
  FaPause,
  FaStop,
  FaDownload,
  FaUpload,
  FaSearch,
  FaEdit,
  FaTrash,
  FaPlus,
  FaMinus,
  FaArrowLeft,
  FaArrowRight,
  FaMoneyBillWave,
  FaPrint,
  FaEye,
} from "react-icons/fa";

interface TDSChallanData {
  simulationType: string;
  financialYear: string;
  quarter: string;
  period: string;
  tan: string;
  deductor: {
    name: string;
    tan: string;
    address: {
      street: string;
      city: string;
      state: string;
      pincode: string;
      country: string;
    };
    contact: {
      phone: string;
      email: string;
    };
    pan: string;
  };
  challanDetails: {
    challanNumber: string;
    challanDate: string;
    bankCode: string;
    branchCode: string;
    amount: number;
    status: string;
    paymentMode: string;
    paymentDate: string;
    receiptNumber: string;
    receiptDate: string;
  };
  tdsSummary: {
    totalGrossAmount: number;
    totalTdsAmount: number;
    totalNetAmount: number;
    totalChallanAmount: number;
    totalDeductees: number;
  };
  simulationConfig: {
    difficulty: string;
    hints: Array<{ field: string; hint: string; order: number }>;
    validationRules: {
      requiredFields: string[];
      autoCalculate: boolean;
      showErrors: boolean;
    };
  };
  learningProgress: {
    completedSteps: string[];
    currentStep: string;
    score: number;
    timeSpent: number;
    attempts: number;
  };
}

const TDSChallanSimulation: React.FC = () => {
  const [currentStep, setCurrentStep] = useState("deductor");
  const [isRunning, setIsRunning] = useState(false);
  const [timeSpent, setTimeSpent] = useState(0);
  const [showHints, setShowHints] = useState(true);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const [simulationData, setSimulationData] = useState<TDSChallanData>({
    simulationType: "TDS_CHALLAN",
    financialYear: "2024-25",
    quarter: "Q1",
    period: "April",
    tan: "",
    deductor: {
      name: "",
      tan: "",
      address: {
        street: "",
        city: "",
        state: "",
        pincode: "",
        country: "India",
      },
      contact: {
        phone: "",
        email: "",
      },
      pan: "",
    },
    challanDetails: {
      challanNumber: "",
      challanDate: "",
      bankCode: "",
      branchCode: "",
      amount: 0,
      status: "DRAFT",
      paymentMode: "ONLINE",
      paymentDate: "",
      receiptNumber: "",
      receiptDate: "",
    },
    tdsSummary: {
      totalGrossAmount: 0,
      totalTdsAmount: 0,
      totalNetAmount: 0,
      totalChallanAmount: 0,
      totalDeductees: 0,
    },
    simulationConfig: {
      difficulty: "BEGINNER",
      hints: [
        {
          field: "tan",
          hint: "TAN format: AAAA12345A (4 letters, 5 digits, 1 letter)",
          order: 1,
        },
        {
          field: "pan",
          hint: "PAN format: AAAAA1234A (5 letters, 4 digits, 1 letter)",
          order: 2,
        },
        {
          field: "challanNumber",
          hint: "Challan number is auto-generated by the system",
          order: 3,
        },
        {
          field: "bankCode",
          hint: "Bank code format: 4 letters (e.g., SBIN for State Bank of India)",
          order: 4,
        },
      ],
      validationRules: {
        requiredFields: ["tan", "deductor.name", "deductor.pan"],
        autoCalculate: true,
        showErrors: true,
      },
    },
    learningProgress: {
      completedSteps: [],
      currentStep: "deductor",
      score: 0,
      timeSpent: 0,
      attempts: 0,
    },
  });

  const steps = [
    { id: "deductor", title: "Deductor Details", completed: false },
    { id: "challan", title: "Challan Details", completed: false },
    { id: "payment", title: "Payment Details", completed: false },
    { id: "preview", title: "Preview & Generate", completed: false },
  ];

  const paymentModes = [
    {
      value: "ONLINE",
      label: "Online Payment",
      description: "Net banking, UPI, Card",
    },
    {
      value: "CHEQUE",
      label: "Cheque Payment",
      description: "Physical cheque deposit",
    },
    {
      value: "CASH",
      label: "Cash Payment",
      description: "Cash deposit at bank",
    },
  ];

  const bankCodes = [
    { code: "SBIN", name: "State Bank of India" },
    { code: "HDFC", name: "HDFC Bank" },
    { code: "ICIC", name: "ICICI Bank" },
    { code: "AXIS", name: "Axis Bank" },
    { code: "KOTK", name: "Kotak Mahindra Bank" },
    { code: "PNB", name: "Punjab National Bank" },
    { code: "BOI", name: "Bank of India" },
    { code: "BOB", name: "Bank of Baroda" },
    { code: "CANR", name: "Canara Bank" },
    { code: "UNIO", name: "Union Bank of India" },
  ];

  const states = [
    "Andhra Pradesh",
    "Arunachal Pradesh",
    "Assam",
    "Bihar",
    "Chhattisgarh",
    "Goa",
    "Gujarat",
    "Haryana",
    "Himachal Pradesh",
    "Jharkhand",
    "Karnataka",
    "Kerala",
    "Madhya Pradesh",
    "Maharashtra",
    "Manipur",
    "Meghalaya",
    "Mizoram",
    "Nagaland",
    "Odisha",
    "Punjab",
    "Rajasthan",
    "Sikkim",
    "Tamil Nadu",
    "Telangana",
    "Tripura",
    "Uttar Pradesh",
    "Uttarakhand",
    "West Bengal",
    "Andaman and Nicobar Islands",
    "Chandigarh",
    "Dadra and Nagar Haveli",
    "Daman and Diu",
    "Delhi",
    "Jammu and Kashmir",
    "Ladakh",
    "Lakshadweep",
    "Puducherry",
  ];

  // Timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isRunning) {
      interval = setInterval(() => {
        setTimeSpent((prev) => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isRunning]);

  const validateField = (field: string, value: string): boolean => {
    switch (field) {
      case "tan":
        return /^[A-Z]{4}[0-9]{5}[A-Z]$/.test(value);
      case "pan":
        return /^[A-Z]{5}[0-9]{4}[A-Z]$/.test(value);
      case "pincode":
        return /^[1-9][0-9]{5}$/.test(value);
      case "email":
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
      case "phone":
        return /^[6-9]\d{9}$/.test(value);
      case "bankCode":
        return /^[A-Z]{4}$/.test(value);
      case "branchCode":
        return /^[0-9]{3}$/.test(value);
      default:
        return true;
    }
  };

  const handleInputChange = (field: string, value: string) => {
    const isValid = validateField(field, value);

    if (
      !isValid &&
      simulationData.simulationConfig.validationRules.showErrors
    ) {
      setErrors((prev) => ({ ...prev, [field]: `Invalid ${field} format` }));
    } else {
      setErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }

    if (field.startsWith("deductor.")) {
      const deductorField = field.split(".")[1];
      setSimulationData((prev) => ({
        ...prev,
        deductor: {
          ...prev.deductor,
          [deductorField]: value,
        },
      }));
    } else if (field.startsWith("challanDetails.")) {
      const challanField = field.split(".")[1];
      setSimulationData((prev) => ({
        ...prev,
        challanDetails: {
          ...prev.challanDetails,
          [challanField]: value,
        },
      }));
    } else {
      setSimulationData((prev) => ({
        ...prev,
        [field]: value,
      }));
    }
  };

  const nextStep = () => {
    const currentIndex = steps.findIndex((step) => step.id === currentStep);
    if (currentIndex < steps.length - 1) {
      setCurrentStep(steps[currentIndex + 1].id);
    }
  };

  const prevStep = () => {
    const currentIndex = steps.findIndex((step) => step.id === currentStep);
    if (currentIndex > 0) {
      setCurrentStep(steps[currentIndex - 1].id);
    }
  };

  const startSimulation = () => {
    setIsRunning(true);
    setSimulationData((prev) => ({
      ...prev,
      learningProgress: {
        ...prev.learningProgress,
        attempts: prev.learningProgress.attempts + 1,
      },
    }));
  };

  const pauseSimulation = () => {
    setIsRunning(false);
  };

  const stopSimulation = () => {
    setIsRunning(false);
    setSimulationData((prev) => ({
      ...prev,
      learningProgress: {
        ...prev.learningProgress,
        timeSpent: prev.learningProgress.timeSpent + timeSpent,
      },
    }));
  };

  const generateChallan = () => {
    const challanNumber = `CHL${Date.now()}${Math.random()
      .toString(36)
      .substr(2, 5)
      .toUpperCase()}`;

    setSimulationData((prev) => ({
      ...prev,
      challanDetails: {
        ...prev.challanDetails,
        challanNumber,
        challanDate: new Date().toISOString().split("T")[0],
        status: "GENERATED",
      },
    }));

    // Calculate score based on completion
    const completedFields = Object.keys(simulationData.deductor).filter(
      (key) =>
        simulationData.deductor[key as keyof typeof simulationData.deductor]
    ).length;

    const score = Math.min(100, (completedFields / 8) * 100);

    setSimulationData((prev) => ({
      ...prev,
      learningProgress: {
        ...prev.learningProgress,
        score: Math.max(prev.learningProgress.score, score),
        completedSteps: [...prev.learningProgress.completedSteps, currentStep],
      },
    }));
  };

  const renderDeductorStep = () => (
    <div className="space-y-6">
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">
          Deductor Details
        </h3>
        <p className="text-blue-700 text-sm">
          Enter the details of the person/entity generating the TDS challan
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            TAN Number *
          </label>
          <input
            type="text"
            value={simulationData.tan}
            onChange={(e) => handleInputChange("tan", e.target.value)}
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors.tan ? "border-red-500" : "border-gray-300"
            }`}
            placeholder="AAAA12345A"
            maxLength={10}
          />
          {errors.tan && (
            <p className="text-red-500 text-xs mt-1">{errors.tan}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Deductor Name *
          </label>
          <input
            type="text"
            value={simulationData.deductor.name}
            onChange={(e) => handleInputChange("deductor.name", e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter deductor name"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            PAN Number *
          </label>
          <input
            type="text"
            value={simulationData.deductor.pan}
            onChange={(e) => handleInputChange("deductor.pan", e.target.value)}
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors["deductor.pan"] ? "border-red-500" : "border-gray-300"
            }`}
            placeholder="AAAAA1234A"
            maxLength={10}
          />
          {errors["deductor.pan"] && (
            <p className="text-red-500 text-xs mt-1">
              {errors["deductor.pan"]}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Email Address
          </label>
          <input
            type="email"
            value={simulationData.deductor.contact.email}
            onChange={(e) =>
              handleInputChange("deductor.contact.email", e.target.value)
            }
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors["deductor.contact.email"]
                ? "border-red-500"
                : "border-gray-300"
            }`}
            placeholder="email@example.com"
          />
          {errors["deductor.contact.email"] && (
            <p className="text-red-500 text-xs mt-1">
              {errors["deductor.contact.email"]}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Phone Number
          </label>
          <input
            type="tel"
            value={simulationData.deductor.contact.phone}
            onChange={(e) =>
              handleInputChange("deductor.contact.phone", e.target.value)
            }
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors["deductor.contact.phone"]
                ? "border-red-500"
                : "border-gray-300"
            }`}
            placeholder="9876543210"
            maxLength={10}
          />
          {errors["deductor.contact.phone"] && (
            <p className="text-red-500 text-xs mt-1">
              {errors["deductor.contact.phone"]}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            State
          </label>
          <select
            value={simulationData.deductor.address.state}
            onChange={(e) =>
              handleInputChange("deductor.address.state", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Select State</option>
            {states.map((state) => (
              <option key={state} value={state}>
                {state}
              </option>
            ))}
          </select>
        </div>

        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Address
          </label>
          <input
            type="text"
            value={simulationData.deductor.address.street}
            onChange={(e) =>
              handleInputChange("deductor.address.street", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter complete address"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            City
          </label>
          <input
            type="text"
            value={simulationData.deductor.address.city}
            onChange={(e) =>
              handleInputChange("deductor.address.city", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter city"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Pincode
          </label>
          <input
            type="text"
            value={simulationData.deductor.address.pincode}
            onChange={(e) =>
              handleInputChange("deductor.address.pincode", e.target.value)
            }
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors["deductor.address.pincode"]
                ? "border-red-500"
                : "border-gray-300"
            }`}
            placeholder="123456"
            maxLength={6}
          />
          {errors["deductor.address.pincode"] && (
            <p className="text-red-500 text-xs mt-1">
              {errors["deductor.address.pincode"]}
            </p>
          )}
        </div>
      </div>
    </div>
  );

  const renderChallanStep = () => (
    <div className="space-y-6">
      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-green-900 mb-2">
          Challan Details
        </h3>
        <p className="text-green-700 text-sm">
          Enter the TDS challan details and payment information
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Challan Number
          </label>
          <input
            type="text"
            value={simulationData.challanDetails.challanNumber}
            readOnly
            className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50"
            placeholder="Auto-generated"
          />
          <p className="text-xs text-gray-500 mt-1">
            Challan number will be auto-generated
          </p>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Challan Date *
          </label>
          <input
            type="date"
            value={simulationData.challanDetails.challanDate}
            onChange={(e) =>
              handleInputChange("challanDetails.challanDate", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Bank Code *
          </label>
          <select
            value={simulationData.challanDetails.bankCode}
            onChange={(e) =>
              handleInputChange("challanDetails.bankCode", e.target.value)
            }
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors["challanDetails.bankCode"]
                ? "border-red-500"
                : "border-gray-300"
            }`}
          >
            <option value="">Select Bank</option>
            {bankCodes.map((bank) => (
              <option key={bank.code} value={bank.code}>
                {bank.code} - {bank.name}
              </option>
            ))}
          </select>
          {errors["challanDetails.bankCode"] && (
            <p className="text-red-500 text-xs mt-1">
              {errors["challanDetails.bankCode"]}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Branch Code *
          </label>
          <input
            type="text"
            value={simulationData.challanDetails.branchCode}
            onChange={(e) =>
              handleInputChange("challanDetails.branchCode", e.target.value)
            }
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors["challanDetails.branchCode"]
                ? "border-red-500"
                : "border-gray-300"
            }`}
            placeholder="001"
            maxLength={3}
          />
          {errors["challanDetails.branchCode"] && (
            <p className="text-red-500 text-xs mt-1">
              {errors["challanDetails.branchCode"]}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Amount *
          </label>
          <input
            type="number"
            value={simulationData.challanDetails.amount}
            onChange={(e) =>
              handleInputChange("challanDetails.amount", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="0.00"
            min="0"
            step="0.01"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Status
          </label>
          <select
            value={simulationData.challanDetails.status}
            onChange={(e) =>
              handleInputChange("challanDetails.status", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="DRAFT">Draft</option>
            <option value="GENERATED">Generated</option>
            <option value="PAID">Paid</option>
          </select>
        </div>
      </div>
    </div>
  );

  const renderPaymentStep = () => (
    <div className="space-y-6">
      <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-purple-900 mb-2">
          Payment Details
        </h3>
        <p className="text-purple-700 text-sm">
          Select payment mode and enter payment details
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Payment Mode *
          </label>
          <select
            value={simulationData.challanDetails.paymentMode}
            onChange={(e) =>
              handleInputChange("challanDetails.paymentMode", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            {paymentModes.map((mode) => (
              <option key={mode.value} value={mode.value}>
                {mode.label} - {mode.description}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Payment Date *
          </label>
          <input
            type="date"
            value={simulationData.challanDetails.paymentDate}
            onChange={(e) =>
              handleInputChange("challanDetails.paymentDate", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Receipt Number
          </label>
          <input
            type="text"
            value={simulationData.challanDetails.receiptNumber}
            onChange={(e) =>
              handleInputChange("challanDetails.receiptNumber", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter receipt number"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Receipt Date
          </label>
          <input
            type="date"
            value={simulationData.challanDetails.receiptDate}
            onChange={(e) =>
              handleInputChange("challanDetails.receiptDate", e.target.value)
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
      </div>

      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h4 className="text-lg font-semibold text-gray-900 mb-4">
          Payment Summary
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <p className="text-sm text-blue-600 font-medium">Challan Amount</p>
            <p className="text-2xl font-bold text-blue-900">
              ₹{simulationData.challanDetails.amount.toFixed(2)}
            </p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <p className="text-sm text-green-600 font-medium">Payment Mode</p>
            <p className="text-lg font-bold text-green-900">
              {simulationData.challanDetails.paymentMode}
            </p>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg">
            <p className="text-sm text-purple-600 font-medium">Bank Code</p>
            <p className="text-lg font-bold text-purple-900">
              {simulationData.challanDetails.bankCode}
            </p>
          </div>
          <div className="bg-orange-50 p-4 rounded-lg">
            <p className="text-sm text-orange-600 font-medium">Status</p>
            <p className="text-lg font-bold text-orange-900">
              {simulationData.challanDetails.status}
            </p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderPreviewStep = () => (
    <div className="space-y-6">
      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-green-900 mb-2">
          Challan Preview
        </h3>
        <p className="text-green-700 text-sm">
          Review the TDS challan before generation
        </p>
      </div>

      <div className="bg-white border border-gray-200 rounded-lg p-8">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            TDS CHALLAN 281
          </h2>
          <p className="text-gray-600">
            Challan for Payment of Tax Deducted at Source
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Deductor Details
            </h3>
            <div className="space-y-2 text-sm">
              <p>
                <span className="font-medium">Name:</span>{" "}
                {simulationData.deductor.name}
              </p>
              <p>
                <span className="font-medium">TAN:</span> {simulationData.tan}
              </p>
              <p>
                <span className="font-medium">PAN:</span>{" "}
                {simulationData.deductor.pan}
              </p>
              <p>
                <span className="font-medium">Address:</span>{" "}
                {simulationData.deductor.address.street}
              </p>
              <p>
                <span className="font-medium">City:</span>{" "}
                {simulationData.deductor.address.city}
              </p>
              <p>
                <span className="font-medium">State:</span>{" "}
                {simulationData.deductor.address.state}
              </p>
              <p>
                <span className="font-medium">Pincode:</span>{" "}
                {simulationData.deductor.address.pincode}
              </p>
            </div>
          </div>

          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Challan Details
            </h3>
            <div className="space-y-2 text-sm">
              <p>
                <span className="font-medium">Challan Number:</span>{" "}
                {simulationData.challanDetails.challanNumber || "TBD"}
              </p>
              <p>
                <span className="font-medium">Challan Date:</span>{" "}
                {simulationData.challanDetails.challanDate}
              </p>
              <p>
                <span className="font-medium">Financial Year:</span>{" "}
                {simulationData.financialYear}
              </p>
              <p>
                <span className="font-medium">Bank Code:</span>{" "}
                {simulationData.challanDetails.bankCode}
              </p>
              <p>
                <span className="font-medium">Branch Code:</span>{" "}
                {simulationData.challanDetails.branchCode}
              </p>
              <p>
                <span className="font-medium">Status:</span>{" "}
                {simulationData.challanDetails.status}
              </p>
            </div>
          </div>
        </div>

        <div className="mb-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Payment Details
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <p className="text-sm text-blue-600 font-medium">Amount</p>
              <p className="text-xl font-bold text-blue-900">
                ₹{simulationData.challanDetails.amount.toFixed(2)}
              </p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <p className="text-sm text-green-600 font-medium">Payment Mode</p>
              <p className="text-lg font-bold text-green-900">
                {simulationData.challanDetails.paymentMode}
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <p className="text-sm text-purple-600 font-medium">
                Payment Date
              </p>
              <p className="text-lg font-bold text-purple-900">
                {simulationData.challanDetails.paymentDate}
              </p>
            </div>
            <div className="bg-orange-50 p-4 rounded-lg">
              <p className="text-sm text-orange-600 font-medium">
                Receipt Number
              </p>
              <p className="text-lg font-bold text-orange-900">
                {simulationData.challanDetails.receiptNumber || "TBD"}
              </p>
            </div>
          </div>
        </div>

        <div className="flex justify-end space-x-4">
          <button
            onClick={generateChallan}
            className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center"
          >
            <FaMoneyBillWave className="mr-2" />
            Generate Challan
          </button>
          <button className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center">
            <FaPrint className="mr-2" />
            Print Challan
          </button>
          <button className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors duration-200 flex items-center">
            <FaDownload className="mr-2" />
            Download PDF
          </button>
        </div>
      </div>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case "deductor":
        return renderDeductorStep();
      case "challan":
        return renderChallanStep();
      case "payment":
        return renderPaymentStep();
      case "preview":
        return renderPreviewStep();
      default:
        return renderDeductorStep();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-4">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  TDS Challan Generation Simulation
                </h1>
                <p className="text-sm text-gray-600">
                  Practice generating TDS challans for tax payment
                </p>
              </div>
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <button
                    onClick={startSimulation}
                    disabled={isRunning}
                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center"
                  >
                    <FaPlay className="mr-2" />
                    Start
                  </button>
                  <button
                    onClick={pauseSimulation}
                    disabled={!isRunning}
                    className="bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 disabled:opacity-50 flex items-center"
                  >
                    <FaPause className="mr-2" />
                    Pause
                  </button>
                  <button
                    onClick={stopSimulation}
                    disabled={!isRunning}
                    className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 disabled:opacity-50 flex items-center"
                  >
                    <FaStop className="mr-2" />
                    Stop
                  </button>
                </div>
                <div className="text-sm text-gray-600">
                  Time: {Math.floor(timeSpent / 60)}:
                  {(timeSpent % 60).toString().padStart(2, "0")}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Progress
              </h3>
              <div className="space-y-2">
                {steps.map((step, index) => (
                  <div
                    key={step.id}
                    className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors duration-200 ${
                      currentStep === step.id
                        ? "bg-blue-100 text-blue-900"
                        : step.completed
                        ? "bg-green-100 text-green-900"
                        : "bg-gray-100 text-gray-600"
                    }`}
                    onClick={() => setCurrentStep(step.id)}
                  >
                    <div className="flex-shrink-0 mr-3">
                      {step.completed ? (
                        <FaCheck className="text-green-600" />
                      ) : currentStep === step.id ? (
                        <FaPlay className="text-blue-600" />
                      ) : (
                        <div className="w-4 h-4 rounded-full border-2 border-gray-400" />
                      )}
                    </div>
                    <div>
                      <p className="font-medium">{step.title}</p>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-6 pt-6 border-t border-gray-200">
                <h4 className="text-sm font-medium text-gray-900 mb-2">
                  Simulation Stats
                </h4>
                <div className="space-y-2 text-sm text-gray-600">
                  <p>Score: {simulationData.learningProgress.score}/100</p>
                  <p>
                    Time: {Math.floor(timeSpent / 60)}:
                    {(timeSpent % 60).toString().padStart(2, "0")}
                  </p>
                  <p>Attempts: {simulationData.learningProgress.attempts}</p>
                </div>
              </div>

              {showHints && (
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <h4 className="text-sm font-medium text-gray-900 mb-2">
                    Hints
                  </h4>
                  <div className="space-y-2 text-sm text-gray-600">
                    {simulationData.simulationConfig.hints.map(
                      (hint, index) => (
                        <div key={index} className="flex items-start">
                          <FaInfoCircle className="text-blue-500 mr-2 mt-0.5 flex-shrink-0" />
                          <p>{hint.hint}</p>
                        </div>
                      )
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              {renderCurrentStep()}

              {/* Navigation */}
              <div className="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
                <button
                  onClick={prevStep}
                  disabled={currentStep === "deductor"}
                  className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                >
                  <FaArrowLeft className="mr-2" />
                  Previous
                </button>

                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => setShowHints(!showHints)}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
                  >
                    <FaInfoCircle className="mr-2" />
                    {showHints ? "Hide" : "Show"} Hints
                  </button>
                  <button className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center">
                    <FaSave className="mr-2" />
                    Save Progress
                  </button>
                </div>

                <button
                  onClick={nextStep}
                  disabled={currentStep === "preview"}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                >
                  Next
                  <FaArrowRight className="ml-2" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TDSChallanSimulation;
